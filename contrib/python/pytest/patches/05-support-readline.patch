--- contrib/python/pytest/_pytest/debugging.py	(index)
+++ contrib/python/pytest/_pytest/debugging.py	(working tree)
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
 
+import os
 import pdb
 import sys
 from doctest import UnexpectedException
@@ -11,6 +12,42 @@ from _pytest import outcomes
 from _pytest.config import hookimpl
 
 
+def import_readline():
+    try:
+        import readline
+    except ImportError:
+        sys.path.append('/usr/lib/python2.7/lib-dynload')
+
+    try:
+        import readline
+    except ImportError as e:
+        print('can not import readline:', e)
+
+        import subprocess
+        try:
+            subprocess.check_call('stty icrnl'.split())
+        except OSError as e:
+            print('can not restore Enter, use Control+J:', e)
+
+
+def tty():
+    if os.isatty(1):
+        return
+
+    fd = os.open('/dev/tty', os.O_RDWR)
+    os.dup2(fd, 0)
+    os.dup2(fd, 1)
+    os.dup2(fd, 2)
+    os.close(fd)
+
+    old_sys_path = sys.path
+    sys.path = list(sys.path)
+    try:
+        import_readline()
+    finally:
+        sys.path = old_sys_path
+
+
 def pytest_addoption(parser):
     group = parser.getgroup("general")
     group._addoption(
@@ -79,6 +116,7 @@ class pytestPDB(object):
     @classmethod
     def set_trace(cls, set_break=True):
         """ invoke PDB set_trace debugging, dropping any IO capturing. """
+        tty()
         import _pytest.config
 
         frame = sys._getframe().f_back
@@ -146,6 +184,7 @@ class PdbInvoke(object):
             out, err = capman.read_global_capture()
             sys.stdout.write(out)
             sys.stdout.write(err)
+        tty()
         _enter_pdb(node, call.excinfo, report)
 
     def pytest_internalerror(self, excrepr, excinfo):
